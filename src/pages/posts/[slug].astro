---
import { Image } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";
import DirectionalPostCard from "~/components/directional-post-card.astro";
import { LinkBadge } from "~/components/link-badge";
import Socials from "~/components/socials.astro";
import Root from "~/layouts/root.astro";
import { formatDate, slugify } from "~/lib/utils";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const { data, render, body, slug } = Astro.props as CollectionEntry<"posts">;
const { Content, remarkPluginFrontmatter } = await render();

let posts = await getCollection("posts");
posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

const postIndex = posts.findIndex((post) => post.slug === slug);
const prevPost = posts[postIndex + 1] as CollectionEntry<"posts"> | undefined;
const nextPost = posts[postIndex - 1] as CollectionEntry<"posts"> | undefined;
---

<Root
  title={data.title + " · Zachary Robinson"}
  description={body}
  keywords={data.tags}
  parent="Posts"
  ogImage={`/og/posts/${slug}.png`}
>
  <article class="mx-auto max-w-prose">
    <div class="mb-8 w-full">
      <h1 class="text-4xl font-semibold text-balance">
        {data.title}
      </h1>

      <p class="text-muted-foreground">
        <span
          title={data.updatedDate
            ? `Updated ${formatDate(data.updatedDate)}`
            : ""}>{formatDate(data.date)}</span
        > · {remarkPluginFrontmatter.minutesRead.split(" ")[0]} min read
      </p>

      {
        data.tags && (
          <div class="mt-4 flex flex-wrap gap-2">
            {data.tags.map((tag) => (
              <LinkBadge href={`/tags/${slugify(tag)}`} variant="default">
                {tag}
              </LinkBadge>
            ))}
          </div>
        )
      }
    </div>

    <div
      class="prose prose-zinc max-w-full break-words dark:prose-invert prose-img:rounded-md"
    >
      {
        data.coverAlt && data.cover && (
          <div class="relative flex pb-4">
            <Image
              src={data.cover}
              alt={data.coverAlt}
              class="peer m-0 rounded-md"
              loading="eager"
            />
            <Image
              src={data.cover}
              alt={data.coverAlt}
              class="absolute -z-10 m-0 rounded-md blur-lg transition peer-hover:blur-xl"
              loading="eager"
            />
          </div>
        )
      }

      {
        data.disclaimer && (
          <blockquote class="italic text-muted-foreground">
            {data.disclaimer}
          </blockquote>
        )
      }

      <Content />
    </div>

    <div class="mt-12 flex flex-col gap-8">
      <hr class="border-muted" />

      <div class="flex flex-wrap items-center justify-between gap-2">
        <div class="flex flex-wrap items-center gap-4">
          <div class="group relative">
            <img
              src="https://avatars.githubusercontent.com/zsrobinson"
              alt="my profile picture"
              class="absolute -z-10 w-16 rounded-full blur transition group-hover:blur-md"
            />

            <img
              src="https://avatars.githubusercontent.com/zsrobinson"
              alt="my profile picture"
              class="w-16 rounded-full"
            />
          </div>

          <div>
            <p class="text-xs text-muted-foreground">Written By</p>
            <p class="font-semibold">Zachary Robinson</p>
          </div>
        </div>

        <Socials />
      </div>

      <p class="leading-7 text-muted-foreground">
        Thanks for reading! If you enjoyed this post, please consider sharing
        it. If you have any comments, questions, or feedback, don't hesitate to
        reach out to me.
      </p>

      <div class="flex grid-cols-2 flex-col gap-4 sm:grid sm:items-start">
        {prevPost && <DirectionalPostCard post={prevPost} type="previous" />}
        {nextPost && <DirectionalPostCard post={nextPost} type="next" />}
      </div>
    </div>
  </article>
</Root>
